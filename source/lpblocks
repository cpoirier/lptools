#!/usr/bin/ruby
#
# tapestry/tools
# lpblocks - outputs a list of blocks in an lp file, one to a line
#
# ------------------------------------------------------------------------
#
# Copyright Chris Poirier 2002-2003.  Contact cpoirier@tapestry-os.org.
# Licensed under the Open Software License, version 1.1
#
# This program is licensed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  Use is ENTIRELY AT YOUR OWN RISK.
#


#------------------------------------------------------------------------------
# Constants follow.  Jump to #CODE for the start of the code.

PRODUCT_VERSION    = "1.03b"
PRODUCT_NAME       = "tapestry/tools lpblocks"
PRODUCT_COPYRIGHT  = "Copyright 2002-2003 Chris Poirier (cpoirier@tapestry-os.org)" 
PRODUCT_DESCRIPTOR = "#{PRODUCT_NAME} #{PRODUCT_VERSION}"
PRODUCT_LICENSE    = "Licensed under the Open Software License, version 1.1"



USAGEHELP = <<END_USAGE

  Generates a list of block names defined in an lp file.
  (Type 'lphelp' for information on the lp system).
                                                              
Usage: lpblocks [options] <file>                             

  --help
       Displays this usage information.                       

  --include-languages=filter-list
       Allows you to provide a comma separated list of 
       languages on which to filter the output.  If not
       supplied, all named blocks are output.  Include an
       empty item to filter for blocks without languages.

  --exclude-languages=filter-list
       Allows you to provide a comma separated list of
       languages to filter from the output.  If not
       supplied, all named blocks are output.  Include an
       empty item to filter out blocks without languages.
       If you supply both --exclude-languages and 
       --include-languages, --include-languages is ignored.

  --code-only
       If present, only blocks with languages will be 
       output.  Equivalent to using --except-languages
       with an empty item.

  --force
       If present, the *.lp* requirement for file names is 
       discarded.  


END_USAGE







#------------------------------------------------------------------------------
# START OF #CODE


begin

   require 'tapestry-unpackaged/language-extensions.rb'
   require 'tapestry-unpackaged/lp/Output.rb'
   require 'tapestry-unpackaged/lp/handle.rb'
   require 'tapestry-unpackaged/lp/constants.rb'

   require 'tapestry-packaged/CommandLineParser.rb'
   require 'tapestry-packaged/FilesProcessor.rb'
   require 'tapestry-packaged/lp/Patterns.rb'
   require 'tapestry-packaged/lp/LPFile.rb'


 #-----------------------------------------------------------------------------
 # Start by parsing the command line options and printing help, if appropriate.


   parameters = Tapestry::CommandLineParser.new()
   flags      = parameters.flags
   files      = parameters.files

   if flags.member?("help") or files.empty? then
      Output.puts( PRODUCT_DESCRIPTOR )
      Output.skip()
      Output.puts( PRODUCT_COPYRIGHT  )
      Output.puts( PRODUCT_LICENSE    )
      Output.skip()
      puts USAGEHELP
      exit
   end


   filter    = "none"
   languages = []

   if flags.member?("exclude-languages") or flags.member?("code-only") then
      filter    = "exclude"
      flag      = flags["exclude-languages"].to_s
      languages = flag.split(",")
      languages.append("") if flag == "" || flag.ends(",")

   elsif flags.member?("include-languages") then
      filter    = "include"
      flag      = flags["include-languages"].to_s
      languages = flag.split(",")
      languages.append("") if flag == "" || flag.ends(",")
   end



 #-----------------------------------------------------------------------------
 # Create the procs for use by the FilesProcessor.

   #
   # onFile loads the named lp file, without processing it, then
   # scans it for external references.  It then outputs the
   # unique list.

   onFile = proc do |path|

      absolute = File.expand_path( path )
      lpfile   = Tapestry::LP::LPFile.produce( absolute, true )

      lpfile.each_coalesced do |block|
         output = true
         if filter == "exclude" and languages.member?(block.language) then
            output = false
         elsif filter == "include" and not languages.member?(block.language) then
            output = false
         end

         puts block.name if output
      end

      true

   end


   #
   # Handles files that do not end in .lp

   onUnrecognized = proc do |filepath|
      Output.puts( filepath + ": not an lp file", 0, STDERR )
   end


   #
   # Handles specified files that do not exist

   onMissing = proc do |filepath|
      Output.puts( filepath + ": does not exist", 0, STDERR );
   end




 #-----------------------------------------------------------------------------
 # RUN

   pattern   = ( flags.member?("force") ? // : LPFILEPATTERN )
   processor = Tapestry::FilesProcessor.new( pattern, false, true, onFile, nil, nil, onUnrecognized, onMissing )

   processor.processFiles( files[0] )




#------------------------------------------------------------------------------

rescue LoadError => error
   STDERR.puts( ">>> Unable to load code libraries." )
   STDERR.puts( ">>> Perhaps the library path has not been added to RUBYLIB?" )
   STDERR.puts( ">>> Details: #{error.message}" )

   exit 2

rescue Exception => error
   raise unless method(:handle)
   exit handle( error, flags ).to_i
end


exit 0

