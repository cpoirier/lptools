#!/usr/bin/ruby
#
# tapestry/tools
# lpdoc - generates xml documentation from lp files
#
# ------------------------------------------------------------------------
#
# Copyright Chris Poirier 2002-2003.  Contact cpoirier@tapestry-os.org.
# Licensed under the Open Software License, version 1.1
#
# This program is licensed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  Use is ENTIRELY AT YOUR OWN RISK.
#


#------------------------------------------------------------------------------
# Constants follow.  Jump to #CODE for the start of the code.

PRODUCT_VERSION    = "1.03b"
PRODUCT_NAME       = "tapestry/tools lpdoc"
PRODUCT_COPYRIGHT  = "Copyright 2002-2003 Chris Poirier (cpoirier@tapestry-os.org)" 
PRODUCT_DESCRIPTOR = "#{PRODUCT_NAME} #{PRODUCT_VERSION}"
PRODUCT_LICENSE    = "Licensed under the Open Software License, version 1.1"



USAGEHELP = <<END_USAGE

  Generates XML documentation from lp source files (type
  'lphelp' for information on the lp system).  Files
  are created in the current directory, and will have .xml
  appended to the existing name.
                                                              
Usage: lpdoc [options] [file(s)]                             
                                                              
  --help                                                  
       Displays this usage information.                       
                                                              
  --stylesheet=path
       References the specified file as the stylesheet for
       the generated XML file.  See also --styletype.

  --styletype=mimetype
       Specifies that the stylesheet specified with 
       --stylesheet is of a particular MIME type.  The 
       default is text/xsl.

  --disable-paragraphs
       If specified, <lp:p> tags will not be used to
       delimit apparent paragraphs.

  --enable-all-blocks
       If specified, <lp:block> tags will delimit all blocks,
       even unnamed ones.

  --disable-pure-code
       By default, the text inside code blocks is considered
       flat (no XML tags), and all XML special characters 
       will be converted to entities.  If you want to embed 
       XML tags in code blocks, set this option.

  --output=filepath
       If you supply only one file to process, this is the
       named of the output xml file.

  --force
       If present, the *.lp* requirement for file names is 
       discarded.  

END_USAGE







#------------------------------------------------------------------------------
# START OF #CODE


begin

   require 'tapestry-unpackaged/language-extensions.rb'
   require 'tapestry-unpackaged/lp/Output.rb'
   require 'tapestry-unpackaged/lp/handle.rb'
   require 'tapestry-unpackaged/lp/constants.rb'

   require 'tapestry-packaged/CommandLineParser.rb'
   require 'tapestry-packaged/FilesProcessor.rb'
   require 'tapestry-packaged/lp/LPFile.rb'
   require 'tapestry-packaged/lp/DocumentorXML.rb'


 #-----------------------------------------------------------------------------
 # Start by parsing the command line options and printing help, if appropriate.


   parameters = Tapestry::CommandLineParser.new()
   flags      = parameters.flags
   files      = parameters.files

   if flags.member?("help") or files.empty? then
      Output.puts( PRODUCT_DESCRIPTOR )
      Output.skip()
      Output.puts( PRODUCT_COPYRIGHT  )
      Output.puts( PRODUCT_LICENSE    )
      Output.skip()
      puts USAGEHELP
      exit
   end



 #-----------------------------------------------------------------------------
 # Process the supplied flags.

   options = {}

   options["stylesheet"]         = flags.member?("stylesheet")         ? flags["stylesheet"] : ""
   options["styletype"]          = flags.member?("styletype")          ? flags["styletype"]  : "text/xsl"
   options["delimit-paragraphs"] = flags.member?("disable-paragraphs") ? false               : true
   options["delimit-all-blocks"] = flags.member?("enable-all-blocks")  ? true                : false
   options["disable-pure-code"]  = flags.member?("disable-pure-code")  ? true                : false
   
   options["extension"] = "xml"
   options["output"]    = flags["output"] if flags.member?("output") and files.length == 1



 #-----------------------------------------------------------------------------
 # Create the procs for use by the FilesProcessor.

   documentor = Tapestry::LP::DocumentorXML.new( options["stylesheet"], options["styletype"] )


   #
   # onFile runs an lp file through the compiler.
   
   onFile = proc do |path|

      Output.puts( "generating documentation for: #{path}" )
      absolute = File.expand_path( path )
   
   
      #
      # All we really have to do is load each file, and call 
      # documentor.document() for each root.

      lpfile = Tapestry::LP::LPFile.produce( absolute )

      delete  = true
      docfile = nil
      begin
         docfile = path + "." + options["extension"]
         docfile = options["output"] if options.member?("output")
   
         File.open( docfile, "w" ) do |file|
            documentor.document( lpfile, file, options["delimit-paragraphs"], options["delimit-all-blocks"], (not options["disable-pure-code"]) )
         end

         delete = false

      ensure
         File.delete( docfile ) if delete and !docfile.nil?
      end

      true
   end


   #
   # Handles files that do not end in .lp

   onUnrecognized = proc do |filepath|
      Output.puts( filepath + ": not an lp file", 0, STDERR )
   end


   #
   # Handles specified files that do not exist

   onMissing = proc do |filepath|
      Output.puts( filepath + ": does not exist", 0, STDERR );
   end




 #-----------------------------------------------------------------------------
 # RUN

   pattern   = ( flags.member?("force") ? // : LPFILEPATTERN )
   processor = Tapestry::FilesProcessor.new( pattern, false, true, onFile, nil, nil, onUnrecognized, onMissing )

   processor.processFiles( files )



#------------------------------------------------------------------------------

rescue LoadError => error
   STDERR.puts( ">>> Unable to load code libraries." )
   STDERR.puts( ">>> Perhaps the library path has not been added to RUBYLIB?" )
   STDERR.puts( ">>> Details: #{error.message}" )

   exit 2

rescue Exception => error
   raise unless method(:handle)
   exit handle( error, flags ).to_i
end


exit 0



