#!/usr/bin/ruby
#
# tapestry/tools
# lpdeps - outputs the list lp files an lp file references, one to a line
#
# ------------------------------------------------------------------------
#
# Copyright Chris Poirier 2002-2003.  Contact cpoirier@tapestry-os.org.
# Licensed under the Open Software License, version 1.1
#
# This program is licensed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  Use is ENTIRELY AT YOUR OWN RISK.
#


#------------------------------------------------------------------------------
# Constants follow.  Jump to #CODE for the start of the code.

PRODUCT_VERSION    = "1.03b"
PRODUCT_NAME       = "tapestry/tools lpdeps"
PRODUCT_COPYRIGHT  = "Copyright 2002-2003 Chris Poirier (cpoirier@tapestry-os.org)" 
PRODUCT_DESCRIPTOR = "#{PRODUCT_NAME} #{PRODUCT_VERSION}"
PRODUCT_LICENSE    = "Licensed under the Open Software License, version 1.1"



USAGEHELP = <<END_USAGE

  Generates a list of lp files that may affect the freshness
  of an lp file's code and documentation outputs.  lpdeps 
  always errs on the side of caution when deciding what to
  report, but does not generally include files that will not
  be transcluded during normal lpcc and lpdoc operations.  
  (Type 'lphelp' for information on the lp system).
                                                              
Usage: lpdeps [options] <file>                             

  --help                                                  
       Displays this usage information.                       

  --force
       If present, the *.lp* requirement for file names is 
       discarded.  

END_USAGE







#------------------------------------------------------------------------------
# START OF #CODE


begin

   require 'tapestry-unpackaged/language-extensions.rb'
   require 'tapestry-unpackaged/lp/Output.rb'
   require 'tapestry-unpackaged/lp/handle.rb'
   require 'tapestry-unpackaged/lp/constants.rb'

   require 'tapestry-packaged/CommandLineParser.rb'
   require 'tapestry-packaged/FilesProcessor.rb'
   require 'tapestry-packaged/lp/Patterns.rb'
   require 'tapestry-packaged/lp/LPFile.rb'


 #-----------------------------------------------------------------------------
 # Start by parsing the command line options and printing help, if appropriate.


   parameters = Tapestry::CommandLineParser.new()
   flags      = parameters.flags
   files      = parameters.files

   if flags.member?("help") or files.empty? then
      Output.puts( PRODUCT_DESCRIPTOR )
      Output.skip()
      Output.puts( PRODUCT_COPYRIGHT  )
      Output.puts( PRODUCT_LICENSE    )
      Output.skip()
      puts USAGEHELP
      exit
   end



 #-----------------------------------------------------------------------------
 # Create the procs for use by the FilesProcessor.

   #
   # onFile loads the named lp file, without processing it, then
   # scans it for external references.  It then outputs the
   # unique list.

   onFile = proc do |path|

      absolute = File.expand_path( path )
      lpfile   = Tapestry::LP::LPFile.produce( absolute, false )

      references = {}

      #
      # First, we scan the raw text for include and inherit directives.

      lpfile.each_line do |line|

         #
         # There are two things of interest: include/inherit directives and
         # embedded references in code blocks, which never cohabit a line.

         isDirective, name, data = Tapestry::LP::Patterns.parseNamedDirective( line )

         if isDirective then
            if Tapestry::LP::Patterns.includeDirectiveNames.member?(name) then
               info = Tapestry::LP::Patterns.processIncludeDirective( data, line )

               file = info["file"].to_s
               references[ lpfile.offset(file) ] = true unless file == ""
            end
         end
      end


      #
      # Then we process the file and scan each code block for references.
      # Note that this means that files already in references above may
      # actually be scanned here.  That is because compilable references
      # matter to us here, and an included reference may become compilable
      # depending on where it is included.

      lpfile.process()

      lpfile.each_coalesced do |block|
         next unless block.code?

         #
         # For each line in the code block, we strip out cross-references, 
         # and then parse for references.

         block.each_line do |line|

            remaining = line.clone

            remaining = remaining.gsub( Tapestry::LP::Patterns.xReferencePattern ) do |match|
               " " * match.length
            end

            remaining = remaining.gsub( Tapestry::LP::Patterns.referencePattern ) do |match|
               info = Tapestry::LP::Patterns.processReferenceDirective( $1, line )
               file = info["file"].to_s

               references[ lpfile.offset(file) ] = true unless file == ""

               " " * match.length
            end

         end
      end


      #
      # Finally, we output the results.

      references.keys.each do |reference|
         puts( reference )
      end


      true

   end


   #
   # Handles files that do not end in .lp

   onUnrecognized = proc do |filepath|
      Output.puts( filepath + ": not an lp file", 0, STDERR )
   end


   #
   # Handles specified files that do not exist

   onMissing = proc do |filepath|
      Output.puts( filepath + ": does not exist", 0, STDERR );
   end




 #-----------------------------------------------------------------------------
 # RUN

   pattern   = ( flags.member?("force") ? // : LPFILEPATTERN )
   processor = Tapestry::FilesProcessor.new( pattern, false, true, onFile, nil, nil, onUnrecognized, onMissing )

   processor.processFiles( files[0] )




#------------------------------------------------------------------------------

rescue LoadError => error
   STDERR.puts( ">>> Unable to load code libraries." )
   STDERR.puts( ">>> Perhaps the library path has not been added to RUBYLIB?" )
   STDERR.puts( ">>> Details: #{error.message}" )

   exit 2

rescue Exception => error
   raise unless method(:handle)
   exit handle( error, flags ).to_i
end


exit 0

